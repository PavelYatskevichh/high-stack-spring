name: high-stack
services:

  content-creation:
    image: hs/content-creation
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        JAR_FILE: content-creation/build/libs/app.jar
        MODULE_NAME: content-creation
        APPLICATION_CLASS: com.yatskevich.hs.spring.content_creation.ContentCreationApplication
    env_file:
      - "service-docker.env"
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - hs-network

  moderation:
    image: hs/moderation
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        JAR_FILE: moderation/build/libs/app.jar
        MODULE_NAME: moderation
        APPLICATION_CLASS: com.yatskevich.hs.spring.moderation.ModerationApplication
    env_file:
      - "service-docker.env"
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - hs-network

  distribution:
    image: hs/distribution
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        JAR_FILE: distribution/build/libs/app.jar
        MODULE_NAME: distribution
        APPLICATION_CLASS: com.yatskevich.hs.spring.distribution.DistributionApplication
    env_file:
      - "service-docker.env"
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka-broker-1:
        condition: service_healthy
      kafka-broker-2:
        condition: service_healthy
      kafka-broker-3:
        condition: service_healthy
    networks:
      - hs-network

  kafka-controller-1:
    image: apache/kafka:3.9.0
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    env_file:
      - "kafka-docker.env"
    networks:
      - hs-network

  kafka-controller-2:
    image: apache/kafka:3.9.0
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    env_file:
      - "kafka-docker.env"
    networks:
      - hs-network

  kafka-controller-3:
    image: apache/kafka:3.9.0
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: controller
      KAFKA_LISTENERS: CONTROLLER://:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    env_file:
      - "kafka-docker.env"
    networks:
      - hs-network

  kafka-broker-1:
    image: apache/kafka:3.9.0
    environment:
      KAFKA_NODE_ID: 4
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
    env_file:
      - "kafka-docker.env"
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    networks:
      - hs-network

  kafka-broker-2:
    image: apache/kafka:3.9.0
    environment:
      KAFKA_NODE_ID: 5
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
    env_file:
      - "kafka-docker.env"
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    networks:
      - hs-network

  kafka-broker-3:
    image: apache/kafka:3.9.0
    environment:
      KAFKA_NODE_ID: 6
      KAFKA_PROCESS_ROLES: broker
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker-3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
    env_file:
      - "kafka-docker.env"
    healthcheck:
      test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 3
    depends_on:
      - kafka-controller-1
      - kafka-controller-2
      - kafka-controller-3
    networks:
      - hs-network

  postgres:
    image: postgres:16.2
    environment:
      POSTGRES_DB: database
      POSTGRES_USER: docker_username
      POSTGRES_PASSWORD: docker_password
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U docker_username -d database
      start_period: 15s
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - hs-network

networks:
  hs-network:
    name: hs-network
