name: high-stack
services:
  content-creation:
    image: content-creation
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        JAR_FILE: content-creation/build/libs/app.jar
        MODULE_NAME: content-creation
        APPLICATION_CLASS: com.yatskevich.hs.spring.content_creation.ContentCreationApplication
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/database
      SPRING_DATASOURCE_USERNAME: docker_username
      SPRING_DATASOURCE_PASSWORD: docker_password
      SPRING_THREADS_VIRTUAL_ENABLED: false
      SERVER_PORT: 8080
      LOGGING_LEVEL_COM_YATSKEVICH: DEBUG
      KAFKA_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hs-network
  moderation:
    image: moderation
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        JAR_FILE: moderation/build/libs/app.jar
        MODULE_NAME: moderation
        APPLICATION_CLASS: com.yatskevich.hs.spring.moderation.ModerationApplication
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/database
      SPRING_DATASOURCE_USERNAME: docker_username
      SPRING_DATASOURCE_PASSWORD: docker_password
      SPRING_THREADS_VIRTUAL_ENABLED: false
      SERVER_PORT: 8080
      LOGGING_LEVEL_COM_YATSKEVICH: DEBUG
      KAFKA_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hs-network
  distribution:
    image: distribution
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
      args:
        JAR_FILE: distribution/build/libs/app.jar
        MODULE_NAME: distribution
        APPLICATION_CLASS: com.yatskevich.hs.spring.distribution.DistributionApplication
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/database
      SPRING_DATASOURCE_USERNAME: docker_username
      SPRING_DATASOURCE_PASSWORD: docker_password
      SPRING_THREADS_VIRTUAL_ENABLED: false
      SERVER_PORT: 8080
      LOGGING_LEVEL_COM_YATSKEVICH: DEBUG
      KAFKA_BOOTSTRAPSERVERS: kafka:9092
      FEIGN_CONTENT_CREATION_URL: content-creation:8080
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hs-network
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - hs-network
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: kafka-topics --list --bootstrap-server localhost:9092
      start_period: 5s
      interval: 10s
      timeout: 10s
      retries: 3
#    # /opt/kafka/bin/kafka-topics.sh --create --topic hs-spring --bootstrap-server localhost:9092
#    image: apache/kafka:3.9.0
#    environment:
#      KAFKA_NODE_ID: 1
#      KAFKA_PROCESS_ROLES: broker,controller
#      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
#      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_NUM_PARTITIONS: 3
#    restart: unless-stopped
#    healthcheck:
#      test: /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
#      start_period: 5s
#      interval: 10s
#      timeout: 10s
#      retries: 3
    networks:
      - hs-network
  postgres:
    image: postgres:16.2
    environment:
      POSTGRES_DB: database
      POSTGRES_USER: docker_username
      POSTGRES_PASSWORD: docker_password
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U docker_username -d database
      start_period: 15s
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - hs-network
networks:
  hs-network:
    name: hs-network
